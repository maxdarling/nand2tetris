// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Sys.jack

/**
 * A library that supports various program execution services.
 */
class Sys {

    /** Performs all the initializations required by the OS. */
    function void init() {
        // ~~~MAGIC IS REAL~~~ ^_^ |.| |.|
        //                         \_____/
        //
        // According to the VM standard mapping on the Hack hardware platform:
        // the VM translator writes write bootstrap code that calls Sys.init,
        // stored in ROM at address 0.
        // When the computer is reset, the program counter is set to 0, the
        // bootstrap code starts running and the Sys.init function is called.
        // Then, the OS performs setup and runs the Main program by calling
        // Main.main, as per the Jack contract.

        // ordered by dependency
        do Memory.init();
        do Math.init();
        do Screen.init();
        do Output.init();
        do Keyboard.init();

        do Main.main();
        do Sys.halt();
        return;
    }

    /** Halts the program execution. */
    function void halt() {
        while (true) { }
        return;
    }

    /** Waits approximately duration milliseconds and returns. Non-portable! */
    function void wait(int duration) {
        // tuned according to my 2019 macbook pro (2.4 GHz 8-Core Intel Core i9)
        var int t;
        while (duration > 0) {
            let t = 95;
            while (t > 0) {
                let t = t - 1;
            }
            let duration = duration - 1;
        }
        return;
    }

    /** Displays the given error code in the form "ERR<errorCode>",
     *  and halts the program's execution. */
    function void error(int errorCode) {
        var String msg;

        let msg = String.new(3);
        do msg.appendChar(69);
        do msg.appendChar(82);
        do msg.appendChar(82);

        do Output.printString(msg);
        do Output.printInt(errorCode);
        return;
    }
}
