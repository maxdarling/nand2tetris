// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean currentColor; // black = true, white = false
    static int kScreenBase; // range: [16384, 24576) (8192 words)

    /** Initializes the Screen. */
    function void init() {
        let kScreenBase = 16384;
        let currentColor = true;
        do Screen.clearScreen();
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while (i < 8192) {
            do Memory.poke(kScreenBase + i, false);
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let currentColor = b;
        return;
    }
    
    /** Give memory addr for a coordinate pair (x, y) */
    function int coordToAddr(int x, int y) {
        return kScreenBase + (32 * y) + (x / 16);
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int addr, word;
        let addr = Screen.coordToAddr(x, y);
        let word = Memory.peek(addr);
        let word = Math.setBit(word, Math.mod(x, 16), currentColor);
        do Memory.poke(addr, word);
        return;
    }
    
    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a, b, dx, dy, diff;
        var int xDir, yDir;
        let a = 0;
        let b = 0;
        let dx = x2 - x1;
        let dy = y2 - y1;
        let diff = 0;
        
        // special case: main alg can't handle horizontal lines without making code messy.
        if (y1 = y2) { 
            do Screen.drawHorizontal(Math.min(x1, x2), y1, Math.abs(x1 - x2));
            return;
        }

        if (x1 < x2) { let xDir = 1; } else { let xDir = -1; }
        if (y1 < y2) { let yDir = 1; } else { let yDir = -1; }

        while (~(a > Math.abs(dx)) & ~(b > Math.abs(dy))) {
            do Screen.drawPixel(x1 + (a * xDir), y1 + (b * yDir));
            if (diff < 0) {
                let a = a + 1;
                let diff = diff + Math.abs(dy);
            } else {
                let b = b + 1;
                let diff = diff - Math.abs(dx);
            }
        }
        return;
    }
    
    /** Helper function. Draw the line (x, y) to (x + length, y). */
    function void drawHorizontal(int x, int y, int length) {
        var int i, addr;
        let i = 0;
        let addr = Screen.coordToAddr(x, y);
        
        while (i < length) {
            if ((Math.mod(x, 16) = 0) & ((length - i) > 15)) {
                // optimization: draw an entire word
                do Memory.poke(addr + (i / 16), currentColor);
                let i = i + 16;
            } else {
                do Screen.drawPixel(x + i, y);
                let i = i + 1;
            }
        } 
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int i;
        let i = 0;

        while ((y1 + i - 1) < (y2)) {
            do Screen.drawLine(x1, y1 + i, x2, y1 + i);
            let i = i + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, dx; 
        let dy = -r;
        while (dy < (r + 1)) {
            let dx = Math.sqrt((r*r) - (dy*dy));
            do Screen.drawLine(x - dx, y + dy, x + dx, y + dy);
            let dy = dy + 1;
        }
        return;
    }
}
