// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static int WORD_SIZE;
    static Array twoToThe; // twoToThe[i] = 2^i
    static int twoYQ; // used by divide() to memoize.

    /** Initializes the library. */
    function void init() {
        let WORD_SIZE = 16;

        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = 16384 + 16384;
        return;
    }

    /** Helper. Returns true if the ith bit of 'x' is set (0-indexed). */
    function boolean hasBit(int x, int i) {
        if ((x < 0) & (i = 15)) {
            return true;
        }
        return ~((x & twoToThe[i]) = 0);
    }

    /** Helper. Set the ith bit of 'x' to on/off and returns the new value. */
    function int setBit(int x, int i, boolean on) {
        if (on) {
            return (x | twoToThe[i]);
        } else {
            return (x & ~(twoToThe[i]));
        }
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        }
        return x;
    }

    /** Returns the product of x and y.
     *  When a Jack compiler detects the multiplication operator '*' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedx, i;
        let sum = 0;
        let shiftedx = x;
        let i = 0;

        while (i < WORD_SIZE) {
            if (Math.hasBit(y, i)) {
                let sum = sum + shiftedx;
            }
            let shiftedx = shiftedx + shiftedx;
            let i = i + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        // note: this alg is broken for INT_MIN because Math.abs(INT_MIN) = INT_MIN.
        // this can be solved with some checks, but the added inefficiency isn't worth it, IMO.
        var int q;
        let q = Math.divHelper(Math.abs(x), Math.abs(y));

        if (x < 0) {
            let q = -q;
        }
        if (y < 0) {
            let q = -q;
        }
        return q;
    }
    // calc x/y for x >= 0 and y >= 0
    function int divHelper(int x, int y) {
        // note: the multiplications in 2*q*y can be avoided by
        // maintaining its value in a variable as the recursion bubbles
        // up from the bottom layer, using addition only.
        var int q;

        if ((y > x) | (y < 0)) { // y>x, or y has overflown, guaranteeing y>x.
            let twoYQ = 0; // (2*y*q) in level above is 0, because q = 0.
            return 0;
        }

        let q = Math.divHelper(x, y + y);
        // if ((x - (2 * q * y)) < y) {
        if ((x - twoYQ) < y) {
            // q' = 2q, y' = y/2
            // desired: 2y'q' = 2*(y/2)*(2*q) = 2*y*q. No-op!
            return q + q;
        }
        else {
            // q' = 2q+1, y' = y/2
            // desired: 2y'q' = 2*(y/2)*(2q + 1) = 2qy + y
            let twoYQ = twoYQ + y;
            return q + q + 1;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, i, term;

        let y = 0;
        let i = (WORD_SIZE / 2) - 1;
        while (i > -1) {
            let term = (y + twoToThe[i]) * (y + twoToThe[i]);
            if ( (~(term > x)) & (term > 0) ) {
                let y = y + twoToThe[i];
            }
            let i = i - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        }
        return b;
    }

    /** Returns x % y */
    function int mod(int x, int y) {
        return x - (Math.divide(x, y) * y);
    }
}
