// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    /**
     * 1  x  x  a  c  c  c  c  c  c  d  d  d  j  j  j
     * 15 14 13 12 11 10 9  8  7  6  5  4  3  2  1  0
     */
    Not (in=instruction[15], out=isAInstr);

    /* load all 'c' bits directly into ALU to specify the operation */
    ALU (x=DReg, y=AorMReg, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUOut, out=outM, ng=ng, zr=zr);

    /* write D-register if 'D=' instruction */
    And (a=instruction[15], b=instruction[4], out=writeD);
    DRegister (in=ALUOut, load=writeD, out=DReg);

    /* feed A or M into ALU */
    Mux16 (a=AReg, b=inM, sel=instruction[12], out=AorMReg);

    /* write A register if A-instruction or 'A=' instruction */
    ARegister (in=AInput, load=writeA, out=AReg, out[0..14]=addressM);
    Or (a=isAInstr, b=instruction[5], out=writeA);

    /* decide potential contents of A-register */
    Mux16 (a=ALUOut, b=instruction, sel=isAInstr, out=AInput);

    /* write M if 'M=' instruction */
    And (a=instruction[15], b=instruction[3], out=writeM);

    /* PC */
    PC (in=AReg, reset=reset, load=jumped, inc=notJumped, out[0..14]=pc);
    /* jumped == was the jump condition met? */
    And (a=instruction[2], b=ng, out=j1);
    And (a=instruction[1], b=zr, out=j2);
    Or (a=ng, b=zr, out=ngOrzr);
    Not (in=ngOrzr, out=gr);
    And (a=instruction[0], b=gr, out=j3);
    Or (a=j1, b=j2, out=j12);
    Or (a=j12, b=j3, out=j123);
    And (a=j123, b=instruction[15], out=jumped);
    Not (in=jumped, out=notJumped);
}
